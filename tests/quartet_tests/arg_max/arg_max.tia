# Unused.
<processing_element_0>

    # Off.
    when %p == XXXXXXXX:
        halt;

# Stream loader.
<processing_element_1>

    # Register initialization.
    init %r0, $0; # base.
    init %r1, $20000; # bound.

    # Asynchronously complete the loads.
    when %p == XXXXXXXX with %i0.0:
        mov %o2.0, %i0; deq %i0;

    # 8x unroll for speed.
    when %p == 00000000:
        uge %p7, %r0, %r1; set %p = Z0000001;

        when %p == 00000001:
            add %o0.0, %r0, $0; set %p = 00000010;

        when %p == 00000010:
            add %o0.0, %r0, $1; set %p = 00000011;

        when %p == 00000011:
            add %o0.0, %r0, $2; set %p = 00000100;

        when %p == 00000100:
            add %o0.0, %r0, $3; set %p = 00000101;

        when %p == 00000101:
            add %o0.0, %r0, $4; set %p = 00000110;

        when %p == 00000110:
            add %o0.0, %r0, $5; set %p = 00000111;

        when %p == 00000111:
            add %o0.0, %r0, $6; set %p = 00001000;

        when %p == 00001000:
            add %o0.0, %r0, $7; set %p = 00001001;

        when %p == 00001001:
            add %r0, %r0, $8; set %p = 00000000;

    # Emit halt canary.
    when %p == 10000001:
        mov %o0.1, $0; set %p = 10000010;

    # Halt.
    when %p == 10000010 with %i0.1:
        halt %o2.1; deq %i0;


# Write address generator.
<processing_element_2>

    # Output the single output address and then halt.
    when %p == 00000000:
        mov %o2.0, $20000; set %p = 00000001;
    when %p == 00000001:
        halt;

# argmax worker PE.
<processing_element_3>

    # Initialize the current maximum to INT32_MIN.
    init %r0, $2147483648;

    # Initialize the argmax variable to zero.
    init %r1, $0;

    # Initialize the counter variable to zero.
    init %r2, $0;

    # Check if we have a new maximum.
    when %p == 00000000 with %i0.0:
        sgt %p7, %i0, %r0; set %p = Z0000001;

        # If we have a new maximum, save the maximum.
        when %p == 10000001 with %i0.0:
            mov %r0, %i0; set %p = 10000010;

        # Then update the argmax variable to the counter's current value.
        when %p == 10000010 with %i0.0:
            mov %r1, %r2; set %p = 00000001;

    # Always dequeue the value on the input channel and update the counter.
    when %p == 00000001 with %i0.0:
        add %r2, %r2, $1; deq %i0; set %p = 00000000;

    # Look for a halt and output the arg max if we get one.
    when %p == 00000000 with %i0.1:
        mov %o2.0, %r1; deq %i0; set %p = 00000010;

    # Halt.
    when %p == 00000010:
        halt;

